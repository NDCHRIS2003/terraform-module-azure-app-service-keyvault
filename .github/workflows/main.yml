name: "Terraform Deployment"
on:
  push:
    branches:
      - main
      # - feature/* 
  pull_request:     
    branches:
    - main   
  workflow_dispatch:
 # The type of permissions needed for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# The credentials needed for terraform to properly authenticate with azure environment (OIDC authentication)
# This generated using service principle. Before this is used the federated credentials of the App registration (Service principle)
# Must be configured. You will need your github organization name and the repo name to do this.
env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: ${{ secrets.ARM_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"

jobs:
  # terraform-plan:
  #   name: "Terraform Plan"
  #   runs-on: ubuntu-latest

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:    
  #     - name: Checkout Repository
  #       uses: actions/checkout@master

# This can be used to authenticate to your azure env if you did not set the global environment variables above for the azure credentials
      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.ARM_CLIENT_ID }}
      #     tenant-id: ${{ secrets.ARM_TENANT_ID }}
      #     subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }       

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.2.6

      # - name: Terraform Init
      #   run: |
      #     terraform init
        
      # - name: Run Terraform Plan        
      #   run: |
      #     pwd                    
      #     terraform plan -input=false


  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    # needs: [terraform-plan]
    # if: github.event_name != 'pull_request' # run only when it is not PR
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:    
      # - name: Generate token
      #   id: generate_token
      #   uses: tibdex/github-app-token@v1
      #   with:
      #     app_id: ${{ secrets.APP_ID }}  # Github App APP_ID
      #     private_key: ${{ secrets.APP_PRIVATE_KEY }} # Create a Github App and generate App Private Key
      # - name: Wait for approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ steps.generate_token.outputs.token }}
      #     approvers: ndchris  # You can replace this with teams that you want to approve this.
      #     minimum-approvals: 1

      - name: Checkout Repository
        uses: actions/checkout@master   

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.6
        
      - name: Run Terraform apply
        env:             
          TERRAFORM_COMMAND: destroy
        run: |
          pwd                    
          bash terraform_exec.sh       
      

